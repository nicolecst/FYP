{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.defaultLogTransform = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.parseSeverityFromString = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n  constructor(entries) {\n    const newEntries = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n  getNumericSeverityLevel(severity) {\n    return this.get(severity);\n  }\n  getSeverityLevelName(level) {\n    return this.get(level);\n  }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\nexports.parseSeverityFromString = parseSeverityFromString;\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: (0, util_1.promisify)((log, cb) => {\n      const logLine = (0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      });\n      stream.write(`${logLine}\\n`, 'utf-8', cb);\n      return;\n    })\n  };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({\n  MONGODB_LOG_PATH\n}, {\n  mongodbLogPath\n}) {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return {\n      mongodbLogPath: mongodbLogPath,\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  return {\n    mongodbLogPath: createStdioLogger(process.stderr),\n    mongodbLogPathIsStdErr: true\n  };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n  return parseSeverityFromString(clientOption) ?? parseSeverityFromString(environmentOption) ?? defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n  const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n  let strToTruncate = '';\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      strToTruncate = bson_1.EJSON.stringify(value, options);\n    } catch (e) {\n      strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n    }\n  }\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength && strToTruncate.charCodeAt(maxDocumentLength - 1) !== strToTruncate.codePointAt(maxDocumentLength - 1)) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength ? `${strToTruncate.slice(0, maxDocumentLength)}...` : strToTruncate;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n  const objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n  const {\n    selector,\n    operation,\n    topologyDescription,\n    message\n  } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n  return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n  return log;\n}\nfunction attachConnectionFields(log, event) {\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n  const {\n    awaited,\n    connectionId\n  } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n  let log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case constants_1.SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = logObject.failure?.message;\n      return log;\n    case constants_1.SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case constants_1.WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, {\n        relaxed: true\n      });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message ?? '(redacted)';\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        } = logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId?.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case constants_1.SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message;\n      return log;\n    case constants_1.TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n      log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\nexports.defaultLogTransform = defaultLogTransform;\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.pendingLog = null;\n    /**\n     * This method should be used when logging errors that do not have a public driver API for\n     * reporting errors.\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\n     * This method should be used to log situations where undesirable application behaviour might\n     * occur. For example, failing to end sessions on `MongoClient.close`.\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\n     * This method should be used to report high-level information about normal driver behaviour.\n     * For example, the creation of a `MongoClient`.\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\n     * This method should be used to report information that would be helpful when debugging an\n     * application. For example, a command starting, succeeding or failing.\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\n     * This method should be used to report fine-grained details related to logic flow. For example,\n     * entering and exiting a function body.\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n  createLoggingSeverities() {\n    const severities = Object();\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        severities[component][severityLevel] = compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n  turnOffSeverities() {\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      this.componentSeverities[component] = exports.SeverityLevel.OFF;\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n  logWriteFailureHandler(error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(exports.MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n  clearPendingLog() {\n    this.pendingLog = null;\n  }\n  willLog(component, severity) {\n    if (severity === exports.SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n  log(severity, component, message) {\n    if (!this.willLog(component, severity)) return;\n    let logMessage = {\n      t: new Date(),\n      c: component,\n      s: severity\n    };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = {\n          ...logMessage,\n          ...message.toLog()\n        };\n      } else {\n        logMessage = {\n          ...logMessage,\n          ...defaultLogTransform(message, this.maxDocumentLength)\n        };\n      }\n    }\n    if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n      this.pendingLog = this.pendingLog.then(() => this.logDestination.write(logMessage)).then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if ((0, utils_1.isPromiseLike)(logResult)) {\n        this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    };\n    const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n        topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n        serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n        connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n        client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n        default: defaultSeverity\n      },\n      maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ?? (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"names":["util_1","require","bson_1","constants_1","utils_1","exports","SeverityLevel","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","DEFAULT_MAX_DOCUMENT_LENGTH","SeverityLevelMap","Map","constructor","entries","newEntries","level","value","push","getNumericSeverityLevel","severity","get","getSeverityLevelName","SEVERITY_LEVEL_MAP","Infinity","MongoLoggableComponent","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","CLIENT","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","createStdioLogger","stream","write","promisify","log","cb","logLine","inspect","compact","breakLength","resolveLogPath","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","mongodbLogPathIsStdErr","stdout","resolveSeverityConfiguration","clientOption","environmentOption","defaultSeverity","compareSeverity","s0","s1","s0Num","s1Num","stringifyWithMaxLen","maxDocumentLength","options","strToTruncate","name","EJSON","stringify","e","message","length","charCodeAt","codePointAt","slice","isLogConvertible","obj","objAsLogConvertible","toLog","undefined","attachServerSelectionFields","serverSelectionEvent","selector","operation","topologyDescription","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","host","port","HostAddress","fromString","address","toHostPort","serverHost","serverPort","serviceId","toHexString","databaseName","serverConnectionId","attachConnectionFields","event","attachSDAMFields","sdamEvent","topologyId","attachServerHeartbeatFields","serverHeartbeatEvent","awaited","defaultLogTransform","logObject","create","SERVER_SELECTION_STARTED","SERVER_SELECTION_FAILED","failure","SERVER_SELECTION_SUCCEEDED","WAITING_FOR_SUITABLE_SERVER","remainingTimeMS","COMMAND_STARTED","command","relaxed","COMMAND_SUCCEEDED","durationMS","duration","reply","COMMAND_FAILED","CONNECTION_POOL_CREATED","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","CONNECTION_POOL_READY","CONNECTION_POOL_CLEARED","_bsontype","CONNECTION_POOL_CLOSED","CONNECTION_CREATED","CONNECTION_READY","CONNECTION_CLOSED","reason","error","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","CONNECTION_CHECKED_OUT","CONNECTION_CHECKED_IN","SERVER_OPENING","SERVER_CLOSED","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_SUCCEEDED","SERVER_HEARTBEAT_FAILED","TOPOLOGY_OPENING","TOPOLOGY_CLOSED","TOPOLOGY_DESCRIPTION_CHANGED","previousDescription","newDescription","key","MongoLogger","pendingLog","bind","warn","info","debug","trace","componentSeverities","logDestination","logDestinationIsStdErr","severities","createLoggingSeverities","component","severityLevel","turnOffSeverities","logWriteFailureHandler","clearPendingLog","willLog","logMessage","t","Date","c","isPromiseLike","then","logResult","resolveOptions","envOptions","clientOptions","resolvedLogPath","combinedOptions","mongodbLogComponentSeverities","default","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","client","MONGODB_LOG_CLIENT","mongodbLogMaxDocumentLength","parseUnsignedInteger","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["../src/mongo_logger.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}