{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = require(\".././utils\");\nconst constants_1 = require(\"../constants\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nclass ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, operation) {\n    this.selector = selector;\n    this.operation = operation;\n    this.topologyDescription = topologyDescription;\n  }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.SERVER_SELECTION_STARTED;\n    this.message = 'Server selection started';\n  }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, error, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.SERVER_SELECTION_FAILED;\n    this.message = 'Server selection failed';\n    this.failure = error;\n  }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, address, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n    this.message = 'Server selection succeeded';\n    const {\n      host,\n      port\n    } = utils_1.HostAddress.fromString(address).toHostPort();\n    this.serverHost = host;\n    this.serverPort = port;\n  }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, remainingTimeMS, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n    this.message = 'Waiting for suitable server to become available';\n    this.remainingTimeMS = remainingTimeMS;\n  }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;","map":{"version":3,"names":["utils_1","require","constants_1","ServerSelectionEvent","constructor","selector","topologyDescription","operation","exports","ServerSelectionStartedEvent","name","SERVER_SELECTION_STARTED","message","ServerSelectionFailedEvent","error","SERVER_SELECTION_FAILED","failure","ServerSelectionSucceededEvent","address","SERVER_SELECTION_SUCCEEDED","host","port","HostAddress","fromString","toHostPort","serverHost","serverPort","WaitingForSuitableServerEvent","remainingTimeMS","WAITING_FOR_SUITABLE_SERVER"],"sources":["../../src/sdam/server_selection_events.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAUA;;;;;AAKA,MAAsBE,oBAAoB;EAmBxC;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCC,SAAiB;IAEjB,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACD,mBAAmB,GAAGA,mBAAmB;EAChD;;AA5BFE,OAAA,CAAAL,oBAAA,GAAAA,oBAAA;AA+BA;;;;;AAKA,MAAaM,2BAA4B,SAAQN,oBAAoB;EAKnE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCC,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAVjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAS,wBAAwB;IAC/B,KAAAC,OAAO,GAAG,0BAA0B;EASpC;;AAZFJ,OAAA,CAAAC,2BAAA,GAAAA,2BAAA;AAeA;;;;;AAKA,MAAaI,0BAA2B,SAAQV,oBAAoB;EAOlE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCQ,KAAY,EACZP,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAbjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAa,uBAAuB;IAC9B,KAAAH,OAAO,GAAG,yBAAyB;IAYjC,IAAI,CAACI,OAAO,GAAGF,KAAK;EACtB;;AAhBFN,OAAA,CAAAK,0BAAA,GAAAA,0BAAA;AAmBA;;;;;AAKA,MAAaI,6BAA8B,SAAQd,oBAAoB;EASrE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCY,OAAe,EACfX,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAfjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAiB,0BAA0B;IACjC,KAAAP,OAAO,GAAG,4BAA4B;IAcpC,MAAM;MAAEQ,IAAI;MAAEC;IAAI,CAAE,GAAGrB,OAAA,CAAAsB,WAAW,CAACC,UAAU,CAACL,OAAO,CAAC,CAACM,UAAU,EAAE;IACnE,IAAI,CAACC,UAAU,GAAGL,IAAI;IACtB,IAAI,CAACM,UAAU,GAAGL,IAAI;EACxB;;AApBFb,OAAA,CAAAS,6BAAA,GAAAA,6BAAA;AAuBA;;;;;AAKA,MAAaU,6BAA8B,SAAQxB,oBAAoB;EAOrE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCsB,eAAuB,EACvBrB,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAbjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAA2B,2BAA2B;IAClC,KAAAjB,OAAO,GAAG,iDAAiD;IAYzD,IAAI,CAACgB,eAAe,GAAGA,eAAe;EACxC;;AAhBFpB,OAAA,CAAAmB,6BAAA,GAAAA,6BAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}