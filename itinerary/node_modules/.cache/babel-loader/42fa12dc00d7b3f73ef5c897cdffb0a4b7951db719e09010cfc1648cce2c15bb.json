{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = require(\"../constants\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CREATED;\n    const {\n      maxConnecting,\n      maxPoolSize,\n      minPoolSize,\n      maxIdleTimeMS,\n      waitQueueTimeoutMS\n    } = pool.options;\n    this.options = {\n      maxConnecting,\n      maxPoolSize,\n      minPoolSize,\n      maxIdleTimeMS,\n      waitQueueTimeoutMS\n    };\n  }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_READY;\n  }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CLOSED;\n  }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CREATED;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_READY;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason, error) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CLOSED;\n    this.connectionId = connection.id;\n    this.reason = reason;\n    this.serviceId = connection.serviceId;\n    this.error = error ?? null;\n  }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n  }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason, error) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n    this.reason = reason;\n    this.error = error;\n  }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECKED_OUT;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECKED_IN;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, options = {}) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CLEARED;\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"names":["constants_1","require","ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","name","CONNECTION_POOL_CREATED","maxConnecting","maxPoolSize","minPoolSize","maxIdleTimeMS","waitQueueTimeoutMS","options","ConnectionPoolReadyEvent","CONNECTION_POOL_READY","ConnectionPoolClosedEvent","CONNECTION_POOL_CLOSED","ConnectionCreatedEvent","connection","CONNECTION_CREATED","connectionId","id","ConnectionReadyEvent","CONNECTION_READY","ConnectionClosedEvent","reason","error","CONNECTION_CLOSED","serviceId","ConnectionCheckOutStartedEvent","CONNECTION_CHECK_OUT_STARTED","ConnectionCheckOutFailedEvent","CONNECTION_CHECK_OUT_FAILED","ConnectionCheckedOutEvent","CONNECTION_CHECKED_OUT","ConnectionCheckedInEvent","CONNECTION_CHECKED_IN","ConnectionPoolClearedEvent","CONNECTION_POOL_CLEARED","interruptInUseConnections"],"sources":["../../src/cmap/connection_pool_events.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}