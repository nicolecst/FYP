{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = require(\"../cmap/wire_protocol/constants\");\nconst collection_1 = require(\"../collection\");\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst indexes_1 = require(\"./indexes\");\nconst operation_1 = require(\"./operation\");\nconst ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern', 'raw', 'fieldsAsRaw', 'useBigInt64', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined', 'enableUtf8Validation']);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name, options = {}) {\n    super(db, options);\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n  get commandName() {\n    return 'create';\n  }\n  async execute(server, session) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n    const encryptedFields = options.encryptedFields ?? db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n    if (encryptedFields) {\n      // Creating a QE collection required min server of 7.0.0\n      // TODO(NODE-5353): Get wire version information from connection.\n      if (!server.loadBalanced && server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n        throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n      }\n      // Create auxilliary collections for queryable encryption support.\n      const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n      const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n      for (const collectionName of [escCollection, ecocCollection]) {\n        const createOp = new CreateCollectionOperation(db, collectionName, {\n          clusteredIndex: {\n            key: {\n              _id: 1\n            },\n            unique: true\n          }\n        });\n        await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n      }\n      if (!options.encryptedFields) {\n        this.options = {\n          ...this.options,\n          encryptedFields\n        };\n      }\n    }\n    const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n    if (encryptedFields) {\n      // Create the required index for queryable encryption support.\n      const createIndexOp = new indexes_1.CreateIndexOperation(db, name, {\n        __safeContent__: 1\n      }, {});\n      await createIndexOp.execute(server, session);\n    }\n    return coll;\n  }\n  async executeWithoutEncryptedFieldsCheck(server, session) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n    const cmd = {\n      create: name\n    };\n    for (const n in options) {\n      if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n        cmd[n] = options[n];\n      }\n    }\n    // otherwise just execute the command\n    await super.executeCommand(server, session, cmd);\n    return new collection_1.Collection(db, name, options);\n  }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["constants_1","require","collection_1","error_1","command_1","indexes_1","operation_1","ILLEGAL_COMMAND_FIELDS","Set","INVALID_QE_VERSION","CreateCollectionOperation","CommandOperation","constructor","db","name","options","commandName","execute","server","session","encryptedFields","client","autoEncryption","encryptedFieldsMap","databaseName","loadBalanced","description","maxWireVersion","MIN_SUPPORTED_QE_WIRE_VERSION","MongoCompatibilityError","MIN_SUPPORTED_QE_SERVER_VERSION","escCollection","ecocCollection","collectionName","createOp","clusteredIndex","key","_id","unique","executeWithoutEncryptedFieldsCheck","coll","createIndexOp","CreateIndexOperation","__safeContent__","cmd","create","n","has","executeCommand","Collection","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["../../src/operations/create_collection.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}