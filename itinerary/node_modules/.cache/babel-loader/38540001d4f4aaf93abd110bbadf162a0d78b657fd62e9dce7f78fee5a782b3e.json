{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.topology = topology;\n    this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n    this.s = {\n      description,\n      options,\n      state: common_1.STATE_CLOSED,\n      operationCount: 0\n    };\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.pool.on(event, e => this.emit(event, e));\n    }\n    this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n    if (this.loadBalanced) {\n      this.monitor = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n    // create the monitor\n    this.monitor = new monitor_1.Monitor(this, this.s.options);\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      this.monitor.on(event, e => this.emit(event, e));\n    }\n    this.monitor.on('resetServer', error => markServerUnknown(this, error));\n    this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n  get clusterTime() {\n    return this.topology.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.topology.clusterTime = clusterTime;\n  }\n  get description() {\n    return this.s.description;\n  }\n  get name() {\n    return this.s.description.address;\n  }\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this.monitor?.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n  destroy() {\n    if (this.s.state === common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    if (!this.loadBalanced) {\n      this.monitor?.close();\n    }\n    this.pool.close();\n    stateTransition(this, common_1.STATE_CLOSED);\n    this.emit('closed');\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this.monitor?.requestCheck();\n    }\n  }\n  /**\n   * Execute a command\n   * @internal\n   */\n  async command(ns, cmd, options) {\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      throw new error_1.MongoServerClosedError();\n    }\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false,\n      directConnection: this.topology.s.options.directConnection\n    });\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n    const session = finalOptions.session;\n    let conn = session?.pinnedConnection;\n    this.incrementOperationCount();\n    if (conn == null) {\n      try {\n        conn = await this.pool.checkOut();\n        if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n          session?.pin(conn);\n        }\n      } catch (checkoutError) {\n        this.decrementOperationCount();\n        if (!(checkoutError instanceof errors_1.PoolClearedError)) this.handleError(checkoutError);\n        throw checkoutError;\n      }\n    }\n    try {\n      try {\n        return await conn.command(ns, cmd, finalOptions);\n      } catch (commandError) {\n        throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n      }\n    } catch (operationError) {\n      if (operationError instanceof error_1.MongoError && operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n        await this.pool.reauthenticate(conn);\n        try {\n          return await conn.command(ns, cmd, finalOptions);\n        } catch (commandError) {\n          throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n        }\n      } else {\n        throw operationError;\n      }\n    } finally {\n      this.decrementOperationCount();\n      if (session?.pinnedConnection !== conn) {\n        this.pool.checkIn(conn);\n      }\n    }\n  }\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error, connection) {\n    if (!(error instanceof error_1.MongoError)) {\n      return;\n    }\n    const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n    const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n    const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({\n          serviceId: connection.serviceId\n        });\n      }\n    } else {\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({\n              serviceId: connection.serviceId\n            });\n          }\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Ensure that error is properly decorated and internal state is updated before throwing\n   * @internal\n   */\n  decorateCommandError(connection, cmd, options, error) {\n    if (typeof error !== 'object' || error == null || !('name' in error)) {\n      throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n    }\n    if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n      error = error.cause;\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return error;\n    }\n    if (connectionIsStale(this.pool, connection)) {\n      return error;\n    }\n    const session = options?.session;\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(this) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    this.handleError(error, connection);\n    return error;\n  }\n  /**\n   * Decrement the operation count, returning the new count.\n   */\n  decrementOperationCount() {\n    return this.s.operationCount -= 1;\n  }\n  /**\n   * Increment the operation count, returning the new count.\n   */\n  incrementOperationCount() {\n    return this.s.operationCount += 1;\n  }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server.monitor?.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || session.transaction.isCommitted && 'commitTransaction' in cmd || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}","map":{"version":3,"names":["connection_1","require","connection_pool_1","errors_1","constants_1","error_1","mongo_types_1","transactions_1","utils_1","common_1","monitor_1","server_description_1","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","Server","TypedEventEmitter","constructor","topology","description","options","serverApi","poolOptions","hostAddress","pool","ConnectionPool","s","state","operationCount","event","CMAP_EVENTS","APM_EVENTS","on","e","emit","Connection","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","Monitor","HEARTBEAT_EVENTS","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","ServerDescription","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","TopologyType","LoadBalanced","connect","destroy","close","requestCheck","command","ns","cmd","db","MongoInvalidArgumentError","MongoServerClosedError","finalOptions","Object","assign","wireProtocolCommand","directConnection","omitReadPreference","readPreference","session","conn","pinnedConnection","incrementOperationCount","checkOut","isPinnableCommand","pin","checkoutError","decrementOperationCount","PoolClearedError","handleError","commandError","decorateCommandError","operationError","MongoError","code","MONGODB_ERROR_CODES","Reauthenticate","reauthenticate","checkIn","connection","isStaleError","connectionGeneration","generation","isNetworkNonTimeoutError","MongoNetworkError","MongoNetworkTimeoutError","isNetworkTimeoutBeforeHandshakeError","isNetworkErrorBeforeHandshake","isAuthHandshakeError","hasErrorLabel","MongoErrorLabel","HandshakeError","addErrorLabel","ResetPool","clear","serviceId","isSDAMUnrecoverableError","shouldHandleStateChangeError","shouldClearPool","maxWireVersion","isNodeShuttingDownError","process","nextTick","MongoRuntimeError","cause","connectionIsStale","hasEnded","serverSession","isDirty","inActiveTransaction","TransientTransactionError","isRetryableWritesEnabled","isTransactionCommand","supportsRetryableWrites","RetryableWriteError","needsRetryableWriteLabel","isPinned","unpin","force","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_FAILED","CLOSED","ENDED","exports","oldRtt","alpha","server","reset","undefined","inTransaction","transaction","isCommitted","serviceGenerations","get","toHexString","err","etv","topologyVersion","stv","compareTopologyVersion","retryWrites"],"sources":["../../src/sdam/server.ts"],"sourcesContent":[null],"mappings":";;;;;;AAEA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAD,OAAA;AAKA,MAAAE,QAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AAYA,MAAAI,OAAA,GAAAJ,OAAA;AAiBA,MAAAK,aAAA,GAAAL,OAAA;AAGA,MAAAM,cAAA,GAAAN,OAAA;AACA,MAAAO,OAAA,GAAAP,OAAA;AAOA,MAAAQ,QAAA,GAAAR,OAAA;AAaA,MAAAS,SAAA,GAAAT,OAAA;AACA,MAAAU,oBAAA,GAAAV,OAAA;AAGA,MAAMW,eAAe,GAAG,IAAAJ,OAAA,CAAAK,gBAAgB,EAAC;EACvC,CAACJ,QAAA,CAAAK,YAAY,GAAG,CAACL,QAAA,CAAAK,YAAY,EAAEL,QAAA,CAAAM,gBAAgB,CAAC;EAChD,CAACN,QAAA,CAAAM,gBAAgB,GAAG,CAACN,QAAA,CAAAM,gBAAgB,EAAEN,QAAA,CAAAO,aAAa,EAAEP,QAAA,CAAAQ,eAAe,EAAER,QAAA,CAAAK,YAAY,CAAC;EACpF,CAACL,QAAA,CAAAQ,eAAe,GAAG,CAACR,QAAA,CAAAQ,eAAe,EAAER,QAAA,CAAAO,aAAa,EAAEP,QAAA,CAAAK,YAAY,CAAC;EACjE,CAACL,QAAA,CAAAO,aAAa,GAAG,CAACP,QAAA,CAAAO,aAAa,EAAEP,QAAA,CAAAK,YAAY;CAC9C,CAAC;AAiCF;AACA,MAAaI,MAAO,SAAQZ,aAAA,CAAAa,iBAA+B;EA0BzD;;;EAGAC,YAAYC,QAAkB,EAAEC,WAA8B,EAAEC,OAAsB;IACpF,KAAK,EAAE;IAEP,IAAI,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS;IAElC,MAAMC,WAAW,GAAG;MAAEC,WAAW,EAAEJ,WAAW,CAACI,WAAW;MAAE,GAAGH;IAAO,CAAE;IAExE,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACM,IAAI,GAAG,IAAIzB,iBAAA,CAAA0B,cAAc,CAAC,IAAI,EAAEH,WAAW,CAAC;IAEjD,IAAI,CAACI,CAAC,GAAG;MACPP,WAAW;MACXC,OAAO;MACPO,KAAK,EAAErB,QAAA,CAAAK,YAAY;MACnBiB,cAAc,EAAE;KACjB;IAED,KAAK,MAAMC,KAAK,IAAI,CAAC,GAAG5B,WAAA,CAAA6B,WAAW,EAAE,GAAG7B,WAAA,CAAA8B,UAAU,CAAC,EAAE;MACnD,IAAI,CAACP,IAAI,CAACQ,EAAE,CAACH,KAAK,EAAGI,CAAM,IAAK,IAAI,CAACC,IAAI,CAACL,KAAK,EAAEI,CAAC,CAAC,CAAC;;IAGtD,IAAI,CAACT,IAAI,CAACQ,EAAE,CAACnC,YAAA,CAAAsC,UAAU,CAACC,qBAAqB,EAAGC,WAAwB,IAAI;MAC1E,IAAI,CAACA,WAAW,GAAGA,WAAW;IAChC,CAAC,CAAC;IAEF,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,IAAI,CAACC,OAAO,GAAG,IAAI;MACnB;MACA;;IAGF;IACA,IAAI,CAACA,OAAO,GAAG,IAAIhC,SAAA,CAAAiC,OAAO,CAAC,IAAI,EAAE,IAAI,CAACd,CAAC,CAACN,OAAO,CAAC;IAEhD,KAAK,MAAMS,KAAK,IAAI5B,WAAA,CAAAwC,gBAAgB,EAAE;MACpC,IAAI,CAACF,OAAO,CAACP,EAAE,CAACH,KAAK,EAAGI,CAAM,IAAK,IAAI,CAACC,IAAI,CAACL,KAAK,EAAEI,CAAC,CAAC,CAAC;;IAGzD,IAAI,CAACM,OAAO,CAACP,EAAE,CAAC,aAAa,EAAGU,KAAuB,IAAKC,iBAAiB,CAAC,IAAI,EAAED,KAAK,CAAC,CAAC;IAC3F,IAAI,CAACH,OAAO,CAACP,EAAE,CAACjB,MAAM,CAAC6B,0BAA0B,EAAGf,KAAoC,IAAI;MAC1F,IAAI,CAACK,IAAI,CACPnB,MAAM,CAAC8B,oBAAoB,EAC3B,IAAIrC,oBAAA,CAAAsC,iBAAiB,CAAC,IAAI,CAAC3B,WAAW,CAACI,WAAW,EAAEM,KAAK,CAACkB,KAAK,EAAE;QAC/DC,aAAa,EAAEC,sBAAsB,CAAC,IAAI,CAAC9B,WAAW,CAAC6B,aAAa,EAAEnB,KAAK,CAACqB,QAAQ;OACrF,CAAC,CACH;MAED,IAAI,IAAI,CAACxB,CAAC,CAACC,KAAK,KAAKrB,QAAA,CAAAM,gBAAgB,EAAE;QACrCH,eAAe,CAAC,IAAI,EAAEH,QAAA,CAAAQ,eAAe,CAAC;QACtC,IAAI,CAACoB,IAAI,CAACnB,MAAM,CAACoC,OAAO,EAAE,IAAI,CAAC;;IAEnC,CAAC,CAAC;EACJ;EAEA,IAAId,WAAWA,CAAA;IACb,OAAO,IAAI,CAACnB,QAAQ,CAACmB,WAAW;EAClC;EAEA,IAAIA,WAAWA,CAACA,WAAoC;IAClD,IAAI,CAACnB,QAAQ,CAACmB,WAAW,GAAGA,WAAW;EACzC;EAEA,IAAIlB,WAAWA,CAAA;IACb,OAAO,IAAI,CAACO,CAAC,CAACP,WAAW;EAC3B;EAEA,IAAIiC,IAAIA,CAAA;IACN,OAAO,IAAI,CAAC1B,CAAC,CAACP,WAAW,CAACkC,OAAO;EACnC;EAEA,IAAIC,aAAaA,CAAA;IACf,IAAI,IAAI,CAAC5B,CAAC,CAACN,OAAO,IAAI,IAAI,CAACM,CAAC,CAACN,OAAO,CAACkC,aAAa,EAAE;MAClD,OAAO,IAAI,CAAC5B,CAAC,CAACN,OAAO,CAACkC,aAAa;;IAErC;EACF;EAEA,IAAIhB,YAAYA,CAAA;IACd,OAAO,IAAI,CAACpB,QAAQ,CAACC,WAAW,CAACoC,IAAI,KAAKjD,QAAA,CAAAkD,YAAY,CAACC,YAAY;EACrE;EAEA;;;EAGAC,OAAOA,CAAA;IACL,IAAI,IAAI,CAAChC,CAAC,CAACC,KAAK,KAAKrB,QAAA,CAAAK,YAAY,EAAE;MACjC;;IAGFF,eAAe,CAAC,IAAI,EAAEH,QAAA,CAAAM,gBAAgB,CAAC;IAEvC;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAAC0B,YAAY,EAAE;MACtB,IAAI,CAACC,OAAO,EAAEmB,OAAO,EAAE;KACxB,MAAM;MACLjD,eAAe,CAAC,IAAI,EAAEH,QAAA,CAAAQ,eAAe,CAAC;MACtC,IAAI,CAACoB,IAAI,CAACnB,MAAM,CAACoC,OAAO,EAAE,IAAI,CAAC;;EAEnC;EAEA;EACAQ,OAAOA,CAAA;IACL,IAAI,IAAI,CAACjC,CAAC,CAACC,KAAK,KAAKrB,QAAA,CAAAK,YAAY,EAAE;MACjC;;IAGFF,eAAe,CAAC,IAAI,EAAEH,QAAA,CAAAO,aAAa,CAAC;IAEpC,IAAI,CAAC,IAAI,CAACyB,YAAY,EAAE;MACtB,IAAI,CAACC,OAAO,EAAEqB,KAAK,EAAE;;IAGvB,IAAI,CAACpC,IAAI,CAACoC,KAAK,EAAE;IACjBnD,eAAe,CAAC,IAAI,EAAEH,QAAA,CAAAK,YAAY,CAAC;IACnC,IAAI,CAACuB,IAAI,CAAC,QAAQ,CAAC;EACrB;EAEA;;;;EAIA2B,YAAYA,CAAA;IACV,IAAI,CAAC,IAAI,CAACvB,YAAY,EAAE;MACtB,IAAI,CAACC,OAAO,EAAEsB,YAAY,EAAE;;EAEhC;EAEA;;;;EAIA,MAAMC,OAAOA,CAACC,EAAoB,EAAEC,GAAa,EAAE5C,OAAuB;IACxE,IAAI2C,EAAE,CAACE,EAAE,IAAI,IAAI,IAAI,OAAOF,EAAE,KAAK,QAAQ,EAAE;MAC3C,MAAM,IAAI7D,OAAA,CAAAgE,yBAAyB,CAAC,gCAAgC,CAAC;;IAGvE,IAAI,IAAI,CAACxC,CAAC,CAACC,KAAK,KAAKrB,QAAA,CAAAO,aAAa,IAAI,IAAI,CAACa,CAAC,CAACC,KAAK,KAAKrB,QAAA,CAAAK,YAAY,EAAE;MACnE,MAAM,IAAIT,OAAA,CAAAiE,sBAAsB,EAAE;;IAGpC;IACA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAElD,OAAO,EAAE;MAC9CmD,mBAAmB,EAAE,KAAK;MAC1BC,gBAAgB,EAAE,IAAI,CAACtD,QAAQ,CAACQ,CAAC,CAACN,OAAO,CAACoD;KAC3C,CAAC;IAEF;IACA;IACA;IACA;IACA,IAAIJ,YAAY,CAACK,kBAAkB,EAAE;MACnC,OAAOL,YAAY,CAACM,cAAc;;IAGpC,MAAMC,OAAO,GAAGP,YAAY,CAACO,OAAO;IACpC,IAAIC,IAAI,GAAGD,OAAO,EAAEE,gBAAgB;IAEpC,IAAI,CAACC,uBAAuB,EAAE;IAC9B,IAAIF,IAAI,IAAI,IAAI,EAAE;MAChB,IAAI;QACFA,IAAI,GAAG,MAAM,IAAI,CAACpD,IAAI,CAACuD,QAAQ,EAAE;QACjC,IAAI,IAAI,CAACzC,YAAY,IAAI0C,iBAAiB,CAAChB,GAAG,EAAEW,OAAO,CAAC,EAAE;UACxDA,OAAO,EAAEM,GAAG,CAACL,IAAI,CAAC;;OAErB,CAAC,OAAOM,aAAa,EAAE;QACtB,IAAI,CAACC,uBAAuB,EAAE;QAC9B,IAAI,EAAED,aAAa,YAAYlF,QAAA,CAAAoF,gBAAgB,CAAC,EAAE,IAAI,CAACC,WAAW,CAACH,aAAa,CAAC;QACjF,MAAMA,aAAa;;;IAIvB,IAAI;MACF,IAAI;QACF,OAAO,MAAMN,IAAI,CAACd,OAAO,CAACC,EAAE,EAAEC,GAAG,EAAEI,YAAY,CAAC;OACjD,CAAC,OAAOkB,YAAY,EAAE;QACrB,MAAM,IAAI,CAACC,oBAAoB,CAACX,IAAI,EAAEZ,GAAG,EAAEI,YAAY,EAAEkB,YAAY,CAAC;;KAEzE,CAAC,OAAOE,cAAc,EAAE;MACvB,IACEA,cAAc,YAAYtF,OAAA,CAAAuF,UAAU,IACpCD,cAAc,CAACE,IAAI,KAAKxF,OAAA,CAAAyF,mBAAmB,CAACC,cAAc,EAC1D;QACA,MAAM,IAAI,CAACpE,IAAI,CAACqE,cAAc,CAACjB,IAAI,CAAC;QACpC,IAAI;UACF,OAAO,MAAMA,IAAI,CAACd,OAAO,CAACC,EAAE,EAAEC,GAAG,EAAEI,YAAY,CAAC;SACjD,CAAC,OAAOkB,YAAY,EAAE;UACrB,MAAM,IAAI,CAACC,oBAAoB,CAACX,IAAI,EAAEZ,GAAG,EAAEI,YAAY,EAAEkB,YAAY,CAAC;;OAEzE,MAAM;QACL,MAAME,cAAc;;KAEvB,SAAS;MACR,IAAI,CAACL,uBAAuB,EAAE;MAC9B,IAAIR,OAAO,EAAEE,gBAAgB,KAAKD,IAAI,EAAE;QACtC,IAAI,CAACpD,IAAI,CAACsE,OAAO,CAAClB,IAAI,CAAC;;;EAG7B;EAEA;;;;EAIAS,WAAWA,CAAC3C,KAAe,EAAEqD,UAAuB;IAClD,IAAI,EAAErD,KAAK,YAAYxC,OAAA,CAAAuF,UAAU,CAAC,EAAE;MAClC;;IAGF,MAAMO,YAAY,GAChBtD,KAAK,CAACuD,oBAAoB,IAAIvD,KAAK,CAACuD,oBAAoB,GAAG,IAAI,CAACzE,IAAI,CAAC0E,UAAU;IACjF,IAAIF,YAAY,EAAE;MAChB;;IAGF,MAAMG,wBAAwB,GAC5BzD,KAAK,YAAYxC,OAAA,CAAAkG,iBAAiB,IAAI,EAAE1D,KAAK,YAAYxC,OAAA,CAAAmG,wBAAwB,CAAC;IACpF,MAAMC,oCAAoC,GAAG,IAAApG,OAAA,CAAAqG,6BAA6B,EAAC7D,KAAK,CAAC;IACjF,MAAM8D,oBAAoB,GAAG9D,KAAK,CAAC+D,aAAa,CAACvG,OAAA,CAAAwG,eAAe,CAACC,cAAc,CAAC;IAChF,IAAIR,wBAAwB,IAAIG,oCAAoC,IAAIE,oBAAoB,EAAE;MAC5F;MACA;MACA,IAAI,CAAC,IAAI,CAAClE,YAAY,EAAE;QACtBI,KAAK,CAACkE,aAAa,CAAC1G,OAAA,CAAAwG,eAAe,CAACG,SAAS,CAAC;QAC9ClE,iBAAiB,CAAC,IAAI,EAAED,KAAyB,CAAC;OACnD,MAAM,IAAIqD,UAAU,EAAE;QACrB,IAAI,CAACvE,IAAI,CAACsF,KAAK,CAAC;UAAEC,SAAS,EAAEhB,UAAU,CAACgB;QAAS,CAAE,CAAC;;KAEvD,MAAM;MACL,IAAI,IAAA7G,OAAA,CAAA8G,wBAAwB,EAACtE,KAAK,CAAC,EAAE;QACnC,IAAIuE,4BAA4B,CAAC,IAAI,EAAEvE,KAAK,CAAC,EAAE;UAC7C,MAAMwE,eAAe,GAAG,IAAA7G,OAAA,CAAA8G,cAAc,EAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAAjH,OAAA,CAAAkH,uBAAuB,EAAC1E,KAAK,CAAC;UACnF,IAAI,IAAI,CAACJ,YAAY,IAAIyD,UAAU,IAAImB,eAAe,EAAE;YACtD,IAAI,CAAC1F,IAAI,CAACsF,KAAK,CAAC;cAAEC,SAAS,EAAEhB,UAAU,CAACgB;YAAS,CAAE,CAAC;;UAGtD,IAAI,CAAC,IAAI,CAACzE,YAAY,EAAE;YACtB,IAAI4E,eAAe,EAAE;cACnBxE,KAAK,CAACkE,aAAa,CAAC1G,OAAA,CAAAwG,eAAe,CAACG,SAAS,CAAC;;YAEhDlE,iBAAiB,CAAC,IAAI,EAAED,KAAyB,CAAC;YAClD2E,OAAO,CAACC,QAAQ,CAAC,MAAM,IAAI,CAACzD,YAAY,EAAE,CAAC;;;;;EAKrD;EAEA;;;;EAIQ0B,oBAAoBA,CAC1BQ,UAAsB,EACtB/B,GAAa,EACb5C,OAAoD,EACpDsB,KAAc;IAEd,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,IAAI,IAAI,IAAI,EAAE,MAAM,IAAIA,KAAK,CAAC,EAAE;MACpE,MAAM,IAAIxC,OAAA,CAAAqH,iBAAiB,CAAC,4BAA4B,GAAG,OAAO7E,KAAK,CAAC;;IAG1E,IAAIA,KAAK,CAACU,IAAI,KAAK,YAAY,IAAI,OAAO,IAAIV,KAAK,IAAIA,KAAK,CAAC8E,KAAK,YAAYtH,OAAA,CAAAuF,UAAU,EAAE;MACxF/C,KAAK,GAAGA,KAAK,CAAC8E,KAAK;;IAGrB,IAAI,EAAE9E,KAAK,YAAYxC,OAAA,CAAAuF,UAAU,CAAC,EAAE;MAClC;MACA,OAAO/C,KAAc;;IAGvB,IAAI+E,iBAAiB,CAAC,IAAI,CAACjG,IAAI,EAAEuE,UAAU,CAAC,EAAE;MAC5C,OAAOrD,KAAK;;IAGd,MAAMiC,OAAO,GAAGvD,OAAO,EAAEuD,OAAO;IAChC,IAAIjC,KAAK,YAAYxC,OAAA,CAAAkG,iBAAiB,EAAE;MACtC,IAAIzB,OAAO,IAAI,CAACA,OAAO,CAAC+C,QAAQ,IAAI/C,OAAO,CAACgD,aAAa,EAAE;QACzDhD,OAAO,CAACgD,aAAa,CAACC,OAAO,GAAG,IAAI;;MAGtC;MACA,IACEC,mBAAmB,CAAClD,OAAO,EAAEX,GAAG,CAAC,IACjC,CAACtB,KAAK,CAAC+D,aAAa,CAACvG,OAAA,CAAAwG,eAAe,CAACoB,yBAAyB,CAAC,EAC/D;QACApF,KAAK,CAACkE,aAAa,CAAC1G,OAAA,CAAAwG,eAAe,CAACoB,yBAAyB,CAAC;;MAGhE,IACE,CAACC,wBAAwB,CAAC,IAAI,CAAC7G,QAAQ,CAAC,IAAI,IAAAd,cAAA,CAAA4H,oBAAoB,EAAChE,GAAG,CAAC,KACrE,IAAA3D,OAAA,CAAA4H,uBAAuB,EAAC,IAAI,CAAC,IAC7B,CAACJ,mBAAmB,CAAClD,OAAO,EAAEX,GAAG,CAAC,EAClC;QACAtB,KAAK,CAACkE,aAAa,CAAC1G,OAAA,CAAAwG,eAAe,CAACwB,mBAAmB,CAAC;;KAE3D,MAAM;MACL,IACE,CAACH,wBAAwB,CAAC,IAAI,CAAC7G,QAAQ,CAAC,IAAI,IAAAd,cAAA,CAAA4H,oBAAoB,EAAChE,GAAG,CAAC,KACrE,IAAA9D,OAAA,CAAAiI,wBAAwB,EAACzF,KAAK,EAAE,IAAArC,OAAA,CAAA8G,cAAc,EAAC,IAAI,CAAC,CAAC,IACrD,CAACU,mBAAmB,CAAClD,OAAO,EAAEX,GAAG,CAAC,EAClC;QACAtB,KAAK,CAACkE,aAAa,CAAC1G,OAAA,CAAAwG,eAAe,CAACwB,mBAAmB,CAAC;;;IAI5D,IACEvD,OAAO,IACPA,OAAO,CAACyD,QAAQ,IAChB1F,KAAK,CAAC+D,aAAa,CAACvG,OAAA,CAAAwG,eAAe,CAACoB,yBAAyB,CAAC,EAC9D;MACAnD,OAAO,CAAC0D,KAAK,CAAC;QAAEC,KAAK,EAAE;MAAI,CAAE,CAAC;;IAGhC,IAAI,CAACjD,WAAW,CAAC3C,KAAK,EAAEqD,UAAU,CAAC;IAEnC,OAAOrD,KAAK;EACd;EAEA;;;EAGQyC,uBAAuBA,CAAA;IAC7B,OAAQ,IAAI,CAACzD,CAAC,CAACE,cAAc,IAAI,CAAC;EACpC;EAEA;;;EAGQkD,uBAAuBA,CAAA;IAC7B,OAAQ,IAAI,CAACpD,CAAC,CAACE,cAAc,IAAI,CAAC;EACpC;;AA9VA;AACgBb,MAAA,CAAAwH,wBAAwB,GAAGtI,WAAA,CAAAsI,wBAAwB;AACnE;AACgBxH,MAAA,CAAA6B,0BAA0B,GAAG3C,WAAA,CAAA2C,0BAA0B;AACvE;AACgB7B,MAAA,CAAAyH,uBAAuB,GAAGvI,WAAA,CAAAuI,uBAAuB;AACjE;AACgBzH,MAAA,CAAAoC,OAAO,GAAGlD,WAAA,CAAAkD,OAAO;AACjC;AACgBpC,MAAA,CAAA8B,oBAAoB,GAAG5C,WAAA,CAAA4C,oBAAoB;AAC3D;AACgB9B,MAAA,CAAA0H,MAAM,GAAGxI,WAAA,CAAAwI,MAAM;AAC/B;AACgB1H,MAAA,CAAA2H,KAAK,GAAGzI,WAAA,CAAAyI,KAAK;AAxBlBC,OAAA,CAAA5H,MAAA,GAAAA,MAAA;AA4Wb,SAASkC,sBAAsBA,CAAC2F,MAAc,EAAE1F,QAAgB;EAC9D,IAAI0F,MAAM,KAAK,CAAC,CAAC,EAAE;IACjB,OAAO1F,QAAQ;;EAGjB,MAAM2F,KAAK,GAAG,GAAG;EACjB,OAAOA,KAAK,GAAG3F,QAAQ,GAAG,CAAC,CAAC,GAAG2F,KAAK,IAAID,MAAM;AAChD;AAEA,SAASjG,iBAAiBA,CAACmG,MAAc,EAAEpG,KAAwB;EACjE;EACA,IAAIoG,MAAM,CAACxG,YAAY,EAAE;IACvB;;EAGF,IAAII,KAAK,YAAYxC,OAAA,CAAAkG,iBAAiB,IAAI,EAAE1D,KAAK,YAAYxC,OAAA,CAAAmG,wBAAwB,CAAC,EAAE;IACtFyC,MAAM,CAACvG,OAAO,EAAEwG,KAAK,EAAE;;EAGzBD,MAAM,CAAC5G,IAAI,CACTnB,MAAM,CAAC8B,oBAAoB,EAC3B,IAAIrC,oBAAA,CAAAsC,iBAAiB,CAACgG,MAAM,CAAC3H,WAAW,CAACI,WAAW,EAAEyH,SAAS,EAAE;IAAEtG;EAAK,CAAE,CAAC,CAC5E;AACH;AAEA,SAASsC,iBAAiBA,CAAChB,GAAa,EAAEW,OAAuB;EAC/D,IAAIA,OAAO,EAAE;IACX,OACEA,OAAO,CAACsE,aAAa,EAAE,IACtBtE,OAAO,CAACuE,WAAW,CAACC,WAAW,IAAI,mBAAmB,IAAInF,GAAI,IAC/D,WAAW,IAAIA,GAAG,IAClB,MAAM,IAAIA,GAAG,IACb,SAAS,IAAIA,GAAG,IAChB,iBAAiB,IAAIA,GAAG,IACxB,aAAa,IAAIA,GAAG;;EAIxB,OAAO,KAAK;AACd;AAEA,SAASyD,iBAAiBA,CAACjG,IAAoB,EAAEuE,UAAsB;EACrE,IAAIA,UAAU,CAACgB,SAAS,EAAE;IACxB,OACEhB,UAAU,CAACG,UAAU,KAAK1E,IAAI,CAAC4H,kBAAkB,CAACC,GAAG,CAACtD,UAAU,CAACgB,SAAS,CAACuC,WAAW,EAAE,CAAC;;EAI7F,OAAOvD,UAAU,CAACG,UAAU,KAAK1E,IAAI,CAAC0E,UAAU;AAClD;AAEA,SAASe,4BAA4BA,CAAC6B,MAAc,EAAES,GAAe;EACnE,MAAMC,GAAG,GAAGD,GAAG,CAACE,eAAe;EAC/B,MAAMC,GAAG,GAAGZ,MAAM,CAAC3H,WAAW,CAACsI,eAAe;EAC9C,OAAO,IAAAjJ,oBAAA,CAAAmJ,sBAAsB,EAACD,GAAG,EAAEF,GAAG,CAAC,GAAG,CAAC;AAC7C;AAEA,SAAS3B,mBAAmBA,CAAClD,OAAkC,EAAEX,GAAa;EAC5E,OAAOW,OAAO,IAAIA,OAAO,CAACsE,aAAa,EAAE,IAAI,CAAC,IAAA7I,cAAA,CAAA4H,oBAAoB,EAAChE,GAAG,CAAC;AACzE;AAEA;;AAEA,SAAS+D,wBAAwBA,CAAC7G,QAAkB;EAClD,OAAOA,QAAQ,CAACQ,CAAC,CAACN,OAAO,CAACwI,WAAW,KAAK,KAAK;AACjD"},"metadata":{},"sourceType":"script","externalDependencies":[]}