{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavBar from \"@/components/NavBar.vue\";\nimport PlanCard from \"@/components/PlanCard.vue\";\nimport PopupForm from \"@/components/PopupForm.vue\";\nimport SubplanCard from \"@/components/SubplanCard.vue\";\nimport { ref } from \"vue\";\nimport axios from \"axios\";\n// import 'vue-datepicker/index.css';\nexport default {\n  name: \"CreateItinerary\",\n  components: {\n    NavBar,\n    PlanCard,\n    PopupForm,\n    SubplanCard\n  },\n  data() {\n    return {\n      step: 1,\n      totalSteps: 3,\n      participants: 1,\n      end: this.end,\n      start: this.start,\n      days: []\n    };\n  },\n  methods: {\n    clicked() {\n      var dailyAct = {\n        itin: {\n          act_name: this.act,\n          day: parseInt(this.day),\n          start: this.sTime,\n          end: this.eTime,\n          memo: this.memo\n        }\n      };\n      if (this.subplancard.length < this.day) {\n        while (this.subplancard.length < this.day) {\n          this.subplancard.push([]);\n        }\n      }\n      this.subplancard[this.day - 1].push(dailyAct);\n      console.log(\"aray \" + this.subplancard);\n      console.log(this.subplancard.length);\n      console.log(typeof this.subplancard);\n      console.log(this.act != \"\");\n      if (this.act == \"\" || this.act == null) return;\n      // this.dailyItin = [];\n      if (this.dailyItin.length < this.day) {\n        while (this.dailyItin.length < this.day) {\n          this.dailyItin.push([]);\n        }\n      }\n      // this.dailyItin.length = 3\n      // this.dailyItin.length = this.dateDiff -1;\n      // this.dailyItin.splice(1, 0, {});\n\n      var position = this.day - 1; // Replace with the desired index\n      this.dailyItin[position].push(dailyAct);\n\n      // this.dailyItin[0].splice(1,0,dailyAct);\n      console.log(dailyAct);\n      console.log(this.dailyItin.length);\n    },\n    nextStep() {\n      this.step++;\n    },\n    previousStep() {\n      this.step--;\n    },\n    addDays(date, days) {\n      // Function to add Days\n      var result = new Date(date);\n      result.setDate(result.getDate() + days);\n      return result.toLocaleString();\n    },\n    weekdays(date, days) {\n      var result = new Date(date);\n      result.setDate(result.getDate() + days);\n      return result.toLocaleString(\"en-US\", {\n        weekday: \"long\"\n      });\n    },\n    async create() {\n      const i = localStorage.getItem(\"userID\");\n      console.log(i);\n      const response = await axios.post(\"/api/create\", {\n        author: i,\n        iname: this.iname,\n        itype: this.itype,\n        participants: this.participants,\n        from: this.start,\n        to: this.end,\n        dailyItin: this.dailyItin,\n        is_public: this.is_public\n      });\n      console.log(response);\n      if (response.status == 201) {\n        alert(response.data);\n      } else {\n        alert(response.data);\n      }\n    }\n  },\n  computed: {\n    dateDiff() {\n      let day = new Date(this.end).getTime() - new Date(this.start).getTime();\n      let diff = Math.floor(day / 86400000) + 1;\n      return diff;\n    }\n  },\n  setup() {\n    const act = ref(\"\");\n    const day = ref();\n    const sTime = ref();\n    const eTime = ref();\n    const memo = ref(\"\");\n    const is_public = ref(true);\n    let dailyItin = [];\n    const subplancard = ref([]);\n    // const helloWorld = ref(null);\n\n    const popupTriggers = ref({\n      buttonTrigger: false\n    });\n    const togglePopup = trigger => {\n      popupTriggers.value[trigger] = !popupTriggers.value[trigger];\n    };\n\n    // onMounted(()=>{\n    //   console.log(helloWorld.value)\n    // })\n    return {\n      popupTriggers,\n      togglePopup,\n      act,\n      day,\n      sTime,\n      eTime,\n      memo,\n      is_public,\n      dailyItin,\n      subplancard\n      // helloWorld\n    };\n  }\n};","map":{"version":3,"names":["NavBar","PlanCard","PopupForm","SubplanCard","ref","axios","name","components","data","step","totalSteps","participants","end","start","days","methods","clicked","dailyAct","itin","act_name","act","day","parseInt","sTime","eTime","memo","subplancard","length","push","console","log","dailyItin","position","nextStep","previousStep","addDays","date","result","Date","setDate","getDate","toLocaleString","weekdays","weekday","create","i","localStorage","getItem","response","post","author","iname","itype","from","to","is_public","status","alert","computed","dateDiff","getTime","diff","Math","floor","setup","popupTriggers","buttonTrigger","togglePopup","trigger","value"],"sources":["/Users/nicolechan/Desktop/FYP_Test/itinerary/src/pages/CreateItinerary.vue"],"sourcesContent":["<template>\n  <div class=\"outmost-container\">\n    <NavBar />\n    <h1>Create itinerary</h1>\n    <div class=\"container\">\n      <form @submit.prevent=\"create()\">\n        <section v-if=\"step == 1\">\n          <div class=\"section-container\">\n            <h1>Step 1</h1>\n            <div class=\"row mt-2\">\n              <label for=\"\">Itinerary Name</label>\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"give a name for your plan..\"\n                v-model=\"iname\"\n              />\n            </div>\n            <div class=\"row mt-2\">\n              <div class=\"col md-6\">\n                <label for=\"\">Type</label>\n                <select name=\"\" id=\"\" class=\"form-control\" v-model=\"itype\">\n                  <option>Choose the trip type..</option>\n                  <option>Solo</option>\n                  <option>Couple</option>\n                  <option>Friends</option>\n                  <option>Family</option>\n                </select>\n              </div>\n              <div class=\"col md-6\">\n                <label for=\"\">Number of participants</label>\n                <input\n                  type=\"number\"\n                  v-model=\"participants\"\n                  placeholder=\"how many?\"\n                  class=\"form-control\"\n                />\n              </div>\n            </div>\n            <div class=\"row mt-2\">\n              <div class=\"col md-6\">\n                <label for=\"\">From</label>\n                <input\n                  required\n                  data-format=\"yyyy/mm/dd\"\n                  type=\"date\"\n                  class=\"form-control\"\n                  placeholder=\"start date\"\n                  v-model=\"start\"\n                />\n              </div>\n              <div class=\"col md-6\">\n                <label for=\"\">To</label>\n                <input\n                  required\n                  data-format=\"yyyy/mm/dd\"\n                  type=\"date\"\n                  class=\"form-control\"\n                  placeholder=\"end date\"\n                  v-model=\"end\"\n                  :min=\"start\"\n                />\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section v-if=\"step == 2\">\n          <div class=\"section-container\">\n            <div class=\"addButton\">\n              <div>\n                <h1>Step 2</h1>\n              </div>\n              <div>\n                <button\n                  class=\"btn create-btn\"\n                  @click.prevent=\"() => togglePopup('buttonTrigger')\"\n                >\n                  <span style=\"font-size: 1.5em; margin-right: 5px\">\n                    <font-awesome-icon\n                      icon=\"fa-solid fa-calendar-plus\"\n                    /> </span\n                  >Add activities\n                </button>\n              </div>\n            </div>\n\n            <p>{{ dateDiff }}</p>\n\n            <div class=\"scrolls\">\n              <PlanCard\n                v-for=\"(n, i) in dateDiff\"\n                :key=\"n\"\n                :n=\"n\"\n                :start=\"addDays(start, i)\"\n                :daysOfWeek=\"weekdays(start, i)\"\n              >\n                <div v-for=\"(row, rowIndex) in subplancard[i]\" :key=\"rowIndex\">\n                  <div v-for=\"(element, columnIndex) in row\" :key=\"columnIndex\">\n                    <SubplanCard\n                      :actName=\"element.act_name\"\n                      :sTime=\"element.sTime\"\n                      :eTime=\"element.eTime\"\n                      :memo=\"element.memo\"\n                    ></SubplanCard>\n                  </div>\n                </div>\n              </PlanCard>\n            </div>\n\n            <PopupForm\n              v-if=\"popupTriggers.buttonTrigger\"\n              :togglePopup=\"() => togglePopup('buttonTrigger')\"\n              :n=\"dateDiff\"\n              v-model:act=\"act\"\n              v-model:day=\"day\"\n              v-model:sTime=\"sTime\"\n              v-model:eTime=\"eTime\"\n              v-model:memo=\"memo\"\n              @clicked=\"clicked\"\n            />\n          </div>\n        </section>\n\n        <section v-if=\"step == 3\">\n          <div class=\"section-container\">\n            <h3>Step 3</h3>\n            <div>\n              <div class=\"form-check\">\n                <input\n                  class=\"form-check-input\"\n                  type=\"checkbox\"\n                  v-model=\"is_public\"\n                  id=\"flexCheckDefault\"\n                />\n                <label class=\"form-check-label\" for=\"flexCheckDefault\">\n                  Public\n                </label>\n                <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                  (Check the box if you want your plan to be seen by everyone.)\n                </small>\n              </div>\n            </div>\n\n            <div class=\"scrolls\">\n              <PlanCard\n                v-for=\"(n, i) in dateDiff\"\n                :key=\"n\"\n                :n=\"n\"\n                :start=\"addDays(start, i)\"\n                :daysOfWeek=\"weekdays(start, i)\"\n              >\n                <div v-for=\"(row, rowIndex) in subplancard[i]\" :key=\"rowIndex\">\n                  <div v-for=\"(element, columnIndex) in row\" :key=\"columnIndex\">\n                    <SubplanCard\n                      :actName=\"element.act_name\"\n                      :sTime=\"element.sTime\"\n                      :eTime=\"element.eTime\"\n                      :memo=\"element.memo\"\n                    ></SubplanCard>\n                  </div>\n                </div>\n              </PlanCard>\n            </div>\n          </div>\n        </section>\n        <div class=\"row mt-2\">\n          <div class=\"buttons\">\n            <div>\n              <button\n                v-if=\"step != 1\"\n                @click.prevent=\"previousStep()\"\n                class=\"btn btn-primary\"\n              >\n                Back\n              </button>\n            </div>\n            <div>\n              <button\n                v-if=\"step != totalSteps && start != null && end != null\"\n                @click.prevent=\"nextStep()\"\n                class=\"btn btn-primary\"\n              >\n                Next\n              </button>\n              <button\n                v-if=\"step == totalSteps\"\n                class=\"btn btn-primary\"\n                type=\"submit\"\n              >\n                Create\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport NavBar from \"@/components/NavBar.vue\";\nimport PlanCard from \"@/components/PlanCard.vue\";\nimport PopupForm from \"@/components/PopupForm.vue\";\nimport SubplanCard from \"@/components/SubplanCard.vue\";\nimport { ref } from \"vue\";\nimport axios from \"axios\";\n// import 'vue-datepicker/index.css';\nexport default {\n  name: \"CreateItinerary\",\n  components: {\n    NavBar,\n    PlanCard,\n    PopupForm,\n    SubplanCard,\n  },\n  data() {\n    return {\n      step: 1,\n      totalSteps: 3,\n      participants: 1,\n      end: this.end,\n      start: this.start,\n      days: [],\n    };\n  },\n  methods: {\n    clicked() {\n      var dailyAct = {\n        itin: {\n          act_name: this.act,\n          day: parseInt(this.day),\n          start: this.sTime,\n          end: this.eTime,\n          memo: this.memo,\n        },\n      };\n\n      if (this.subplancard.length < this.day) {\n        while (this.subplancard.length < this.day) {\n          this.subplancard.push([]);\n        }\n      }\n      this.subplancard[this.day - 1].push(dailyAct);\n      console.log(\"aray \" + this.subplancard);\n      console.log(this.subplancard.length);\n      console.log(typeof this.subplancard);\n\n      console.log(this.act != \"\");\n      if (this.act == \"\" || this.act == null) return;\n      // this.dailyItin = [];\n      if (this.dailyItin.length < this.day) {\n        while (this.dailyItin.length < this.day) {\n          this.dailyItin.push([]);\n        }\n      }\n      // this.dailyItin.length = 3\n      // this.dailyItin.length = this.dateDiff -1;\n      // this.dailyItin.splice(1, 0, {});\n\n      var position = this.day - 1; // Replace with the desired index\n      this.dailyItin[position].push(dailyAct);\n\n      // this.dailyItin[0].splice(1,0,dailyAct);\n      console.log(dailyAct);\n      console.log(this.dailyItin.length);\n    },\n    nextStep() {\n      this.step++;\n    },\n    previousStep() {\n      this.step--;\n    },\n    addDays(date, days) {\n      // Function to add Days\n      var result = new Date(date);\n      result.setDate(result.getDate() + days);\n      return result.toLocaleString();\n    },\n    weekdays(date, days) {\n      var result = new Date(date);\n      result.setDate(result.getDate() + days);\n      return result.toLocaleString(\"en-US\", { weekday: \"long\" });\n    },\n    async create() {\n      const i = localStorage.getItem(\"userID\");\n      console.log(i);\n\n      const response = await axios.post(\"/api/create\", {\n        author: i,\n        iname: this.iname,\n        itype: this.itype,\n        participants: this.participants,\n        from: this.start,\n        to: this.end,\n        dailyItin: this.dailyItin,\n        is_public: this.is_public,\n      });\n\n      console.log(response);\n      if (response.status == 201) {\n        alert(response.data);\n      } else {\n        alert(response.data);\n      }\n    },\n  },\n  computed: {\n    dateDiff() {\n      let day = new Date(this.end).getTime() - new Date(this.start).getTime();\n      let diff = Math.floor(day / 86400000) + 1;\n      return diff;\n    },\n  },\n  setup() {\n    const act = ref(\"\");\n    const day = ref();\n    const sTime = ref();\n    const eTime = ref();\n    const memo = ref(\"\");\n    const is_public = ref(true);\n    let dailyItin = [];\n    const subplancard = ref([]);\n    // const helloWorld = ref(null);\n\n    const popupTriggers = ref({\n      buttonTrigger: false,\n    });\n\n    const togglePopup = (trigger) => {\n      popupTriggers.value[trigger] = !popupTriggers.value[trigger];\n    };\n\n    // onMounted(()=>{\n    //   console.log(helloWorld.value)\n    // })\n    return {\n      popupTriggers,\n      togglePopup,\n      act,\n      day,\n      sTime,\n      eTime,\n      memo,\n      is_public,\n      dailyItin,\n      subplancard,\n      // helloWorld\n    };\n  },\n};\n</script>\n<style scoped>\n.container {\n  width: 80%;\n  height: 70vh;\n  padding: 30px;\n  border-radius: 20px;\n  background-color: #fff;\n}\n.outmost-container{\n  background-color: #016a70;\n  height: 100vh;\n  width: 100%;\n}\n.buttons {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.slider {\n  display: block;\n  width: 100%;\n  color: #016a70;\n}\n\n.scrolls {\n  display: flex;\n  flex-wrap: no-wrap;\n  overflow-x: auto;\n  margin: 20px;\n}\n\n.addButton {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 10px;\n}\n.create-btn {\n  border-color: #016a70;\n  color: #016a70;\n}\n.create-btn:hover {\n  border-color: #016a70;\n  background-color: #016a70;\n  color: #ffffdd;\n}\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}