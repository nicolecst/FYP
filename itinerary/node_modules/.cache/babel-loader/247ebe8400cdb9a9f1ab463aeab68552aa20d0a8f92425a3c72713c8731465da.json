{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = require(\"./aws\");\nconst azure_1 = require(\"./azure\");\nconst gcp_1 = require(\"./gcp\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n  const provider = kmsProviders[providerName];\n  if (provider == null) {\n    return false;\n  }\n  return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders) {\n  let finalKMSProviders = kmsProviders;\n  if (isEmptyCredentials('aws', kmsProviders)) {\n    finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n  }\n  if (isEmptyCredentials('gcp', kmsProviders)) {\n    finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n  }\n  if (isEmptyCredentials('azure', kmsProviders)) {\n    finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n  }\n  return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials;","map":{"version":3,"names":["aws_1","require","azure_1","gcp_1","isEmptyCredentials","providerName","kmsProviders","provider","Object","keys","length","exports","refreshKMSCredentials","finalKMSProviders","loadAWSCredentials","loadGCPCredentials","loadAzureCredentials"],"sources":["../../../src/client-side-encryption/providers/index.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,KAAA,GAAAF,OAAA;AA4HA;;;;;;;;AAQA,SAAgBG,kBAAkBA,CAChCC,YAA6C,EAC7CC,YAA0B;EAE1B,MAAMC,QAAQ,GAAGD,YAAY,CAACD,YAAY,CAAC;EAC3C,IAAIE,QAAQ,IAAI,IAAI,EAAE;IACpB,OAAO,KAAK;;EAEd,OAAO,OAAOA,QAAQ,KAAK,QAAQ,IAAIC,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,MAAM,KAAK,CAAC;AAC3E;AATAC,OAAA,CAAAP,kBAAA,GAAAA,kBAAA;AAWA;;;;;;;AAOO,eAAeQ,qBAAqBA,CAACN,YAA0B;EACpE,IAAIO,iBAAiB,GAAGP,YAAY;EAEpC,IAAIF,kBAAkB,CAAC,KAAK,EAAEE,YAAY,CAAC,EAAE;IAC3CO,iBAAiB,GAAG,MAAM,IAAAb,KAAA,CAAAc,kBAAkB,EAACD,iBAAiB,CAAC;;EAGjE,IAAIT,kBAAkB,CAAC,KAAK,EAAEE,YAAY,CAAC,EAAE;IAC3CO,iBAAiB,GAAG,MAAM,IAAAV,KAAA,CAAAY,kBAAkB,EAACF,iBAAiB,CAAC;;EAGjE,IAAIT,kBAAkB,CAAC,OAAO,EAAEE,YAAY,CAAC,EAAE;IAC7CO,iBAAiB,GAAG,MAAM,IAAAX,OAAA,CAAAc,oBAAoB,EAACH,iBAAiB,CAAC;;EAEnE,OAAOA,iBAAiB;AAC1B;AAfAF,OAAA,CAAAC,qBAAA,GAAAA,qBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}