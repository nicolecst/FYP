{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent, pipeline = [], options = {}) {\n    super();\n    this.pipeline = pipeline;\n    this.options = {\n      ...options\n    };\n    delete this.options.writeConcern;\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken() {\n    return this.cursor?.resumeToken;\n  }\n  /** Check if there is any document still available in the Change Stream */\n  async hasNext() {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const hasNext = await this.cursor.hasNext();\n        return hasNext;\n      } catch (error) {\n        try {\n          await this._processErrorIteratorMode(error);\n        } catch (error) {\n          try {\n            await this.close();\n          } catch {\n            // We are not concerned with errors from close()\n          }\n          throw error;\n        }\n      }\n    }\n  }\n  /** Get the next available document from the Change Stream. */\n  async next() {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const change = await this.cursor.next();\n        const processedChange = this._processChange(change ?? null);\n        return processedChange;\n      } catch (error) {\n        try {\n          await this._processErrorIteratorMode(error);\n        } catch (error) {\n          try {\n            await this.close();\n          } catch {\n            // We are not concerned with errors from close()\n          }\n          throw error;\n        }\n      }\n    }\n  }\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  async tryNext() {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      try {\n        const change = await this.cursor.tryNext();\n        return change ?? null;\n      } catch (error) {\n        try {\n          await this._processErrorIteratorMode(error);\n        } catch (error) {\n          try {\n            await this.close();\n          } catch {\n            // We are not concerned with errors from close()\n          }\n          throw error;\n        }\n      }\n    }\n  }\n  async *[Symbol.asyncIterator]() {\n    if (this.closed) {\n      return;\n    }\n    try {\n      // Change streams run indefinitely as long as errors are resumable\n      // So the only loop breaking condition is if `next()` throws\n      while (true) {\n        yield await this.next();\n      }\n    } finally {\n      try {\n        await this.close();\n      } catch {\n        // we're not concerned with errors from close()\n      }\n    }\n  }\n  /** Is the cursor closed */\n  get closed() {\n    return this[kClosed] || this.cursor.closed;\n  }\n  /** Close the Change Stream */\n  async close() {\n    this[kClosed] = true;\n    const cursor = this.cursor;\n    try {\n      await cursor.close();\n    } finally {\n      this._endStream();\n    }\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.client : null;\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n    return changeStreamCursor;\n  }\n  /** @internal */\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close().catch(() => null);\n  }\n  /** @internal */\n  _streamEvents(cursor) {\n    this._setIsEmitter();\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n  /** @internal */\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n  _processChange(change) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n  _processErrorStreamMode(changeStreamError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n  async _processErrorIteratorMode(changeStreamError) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      try {\n        await this.close();\n      } catch {\n        // ignore errors from close\n      }\n      throw changeStreamError;\n    }\n    await this.cursor.close().catch(() => null);\n    const topology = (0, utils_1.getTopology)(this.parent);\n    try {\n      await topology.selectServerAsync(this.cursor.readPreference, {});\n      this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n    } catch {\n      // if the topology can't reconnect, close the stream\n      await this.close();\n      throw changeStreamError;\n    }\n  }\n}\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream;","map":{"version":3,"names":["collection_1","require","constants_1","change_stream_cursor_1","db_1","error_1","mongo_client_1","mongo_types_1","utils_1","kCursorStream","Symbol","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","RESUME_TOKEN_CHANGED","END","CLOSE","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","TypedEventEmitter","constructor","parent","pipeline","options","writeConcern","Collection","type","Db","MongoClient","MongoChangeStreamError","namespace","s","readPreference","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","removeAllListeners","cursorStream","resumeToken","hasNext","_setIsIterator","error","_processErrorIteratorMode","close","next","change","processedChange","_processChange","tryNext","asyncIterator","closed","_endStream","stream","streamOptions","_setIsEmitter","MongoAPIError","changeStreamStageOptions","filterOptions","allChangesForCluster","$changeStream","client","MongoRuntimeError","toString","changeStreamCursor","ChangeStreamCursor","event","e","emit","CHANGE","_closeEmitterModeWithError","ERROR","catch","_processErrorStreamMode","forEach","destroy","undefined","_id","cacheResumeToken","startAtOperationTime","changeStreamError","isResumableError","maxWireVersion","topology","getTopology","selectServer","serverSelectionError","resumeOptions","selectServerAsync","RESPONSE","MORE","INIT","exports"],"sources":["../src/change_stream.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}